description:
globs:
alwaysApply: true
---
# EcoSEO Development Rules

## Project Conventions

### CSS and Styling
- Use CSS-defined utility classes from `@/src/assets/css/style.css` (e.g. `text-success`, `bg-success-light`) for semantic colors instead of raw Tailwind classes like `text-green-600`

### Components
- Always use the components inside `@/src/components/common` whenever needed.
- Prefer reusable components over custom implementations.
- Always read the README on components at your first requests to see what you can use.

### Configuration
- Always use the files located in `@/src/config/` within the code
- Scan these files to identify variables and incorporate them when making code changes
- Javascript put only on @assets/js/main.js

### Code Style
- Do not include comments in the code

## Code Organization

### No Business Logic in Views
- Keep business logic out of views/templates
- Use helpers, services, or configuration files for complex logic
- Views should only handle presentation and data binding
- Move calculations, API calls, and data processing to appropriate service classes
- Always if asked to create a page, separate it into sections inside @components/sections

## Git & Version Control

### Semantic Commits
- Use semantic commit messages: `feat:`, `fix:`, `refactor:`, `docs:`, `style:`, `test:`, `chore:`
- Follow the pattern: `type(scope): description`
- Examples: `feat(contact): add form validation`, `fix(api): resolve curl error`

## Accessibility

### ARIA and Semantic HTML
- Always use accessibility attributes (`aria-*`, `alt`, `role`, etc.) in interactive components
- Ensure proper heading hierarchy (h1, h2, h3, etc.)
- Add alt text to all images with meaningful descriptions
- Use semantic HTML elements (nav, main, section, article, etc.)
- Ensure keyboard navigation works for all interactive elements
- Maintain proper color contrast ratios

### Form Accessibility
- Associate labels with form controls using `for` attribute
- Use fieldset and legend for grouped form elements
- Provide error messages that are screen reader accessible
- Ensure focus indicators are visible

## Responsive Design

### Mobile-First Approach
- Design for mobile devices first, then enhance for larger screens
- Use responsive breakpoints consistently across components
- Test all components at different screen sizes before committing
- Ensure touch targets are at least 44px for mobile devices

### Responsive Components
- All components and sections must be responsive
- Use utility classes and breakpoints defined in the project
- Avoid fixed widths that could break on smaller screens
- Test navigation and menus on mobile devices

## Code Quality

### Avoid Dead Code
- Remove unused or unnecessary code before committing
- Don't leave commented-out code in production
- Remove unused imports, variables, and functions
- Keep the codebase clean and maintainable

## Examples

### ✅ Good CSS Usage
```html
<button class="text-success bg-success-light hover:bg-success">
    Success Button
</button>
```

### ✅ Good Component Usage
```php
<?= $this->insert('components/common/button', [
    'text' => 'Submit',
    'variant' => 'primary',
]) ?>
```

### ✅ Good Configuration Usage
```php
$siteConfig = require __DIR__ . '/../config/site.php';
$email = $siteConfig['email']['primary'];
```

### ❌ Bad
```html
<button class="text-green-600 bg-green-100">
    Success Button
</button>
```

## Checklist
- [ ] Use CSS utility classes from style.css
- [ ] Use common components when available
- [ ] Use configuration files for variables
- [ ] No business logic in views
- [ ] Semantic commit message
- [ ] Accessibility attributes added
- [ ] Responsive design implemented
- [ ] No dead code left behind
- [ ] No comments in code